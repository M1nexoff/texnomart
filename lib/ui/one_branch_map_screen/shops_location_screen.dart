import 'dart:async';import 'dart:developer';import 'package:flutter/material.dart';import 'package:flutter/material.dart' as a;import 'package:texnomart/data/source/remote/response/store/store_response.dart';import 'package:yandex_maps_mapkit_lite/mapkit.dart';import 'package:yandex_maps_mapkit_lite/mapkit.dart' as map;import 'package:yandex_maps_mapkit_lite/mapkit_factory.dart';import 'package:yandex_maps_mapkit_lite/yandex_map.dart';import 'package:yandex_maps_mapkit_lite/src/bindings/image/image_provider.dart' as img_provider;import 'package:yandex_maps_mapkit_lite/src/mapkit/animation.dart' as animation;class ShopsLocationPage extends StatefulWidget {  final Store? data;  const ShopsLocationPage({this.data, super.key});  @override  State<ShopsLocationPage> createState() => _ShopsLocationPageState();}class _ShopsLocationPageState extends State<ShopsLocationPage> {  final mapControllerCompleter = Completer<MapWindow>();  final List<MapObject> mapObjects = [];  // Future<void> _moveToCurrentLocation(double lat, double lon) async {  //   (await mapControllerCompleter.future).map.move(  //     CameraPosition(  //       Point(  //           latitude: lat,  //           longitude: lon,  //         ),  //         zoom: 15, azimuth: 0, tilt: 45,  //       ),  //   );  // }  // Future<Uint8List> svgToPng(String svgString, BuildContext context) async {  //   final pictureInfo =  //       await vg.loadPicture(SvgStringLoader(svgString), context);  //   final image = await pictureInfo.picture.toImage(100, 100);  //   final byteData = await image.toByteData(format: ImageByteFormat.png);  //   if (byteData == null) {  //     throw Exception('Unable to convert SVG to PNG');  //   }  //   final pngBytes = byteData.buffer.asUint8List();  //   return pngBytes;  // }  @override  void initState() {    mapkit.onStart();    // _moveToCurrentLocation(    //     double.parse(widget.data!.lat!), double.parse(widget.data!.long!));    super.initState();  }  late final MyMapObjectTapListener onTap;  @override  Widget build(BuildContext context) {    return Scaffold(        appBar: AppBar(          backgroundColor: Colors.amberAccent,          title: Text("Do'konlar", style: a.TextStyle(fontFamily: 'PaynetB'),),        ),        body: YandexMap(          onMapCreated: (controller) {            onTap = MyMapObjectTapListener(onTap: (p0, p1) {              log("jahongir etti");              showModalBottomSheet(                context: context,                builder: (BuildContext context) {                  return Container(                    color: Colors.white,                    width: double.infinity,                    child: Column(                      mainAxisSize: MainAxisSize.min,                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [                        Padding(                          padding: const EdgeInsets.all(16.0),                          child: Text(widget.data!.address.toString(),style: a.TextStyle(                            fontSize: 20, fontFamily: 'PaynetB',                          )),                        ),                        SizedBox(height: 10,),                        ListTile(                          leading: Icon(Icons.safety_check),                          title: Column(                            children: [                              Text("${widget.data!.address}",style: a.TextStyle(fontSize: 10),)                            ],                          ),                        ),                        SizedBox(height: 16,),                        Row(                          children: [                            SizedBox(width: 16,),                            Icon(Icons.shop),                            SizedBox(width: 16,),                            Text("Du-Yak(${widget.data!.workTime})")                          ],                        ),                        SizedBox(height: 16,),                        Row(                          children: [                            SizedBox(width: 16,),                            Icon(Icons.phone),                            SizedBox(width: 16,),                            Text("${widget.data!.phone}")                          ],                        ),                        SizedBox(height: 50,),                      ],                    ),                  );                },              );              return true;            },);            // mapControllerCompleter.complete(controller);            controller.map.mapObjects.addPlacemark()              ..geometry =  Point(              latitude: double.parse(widget.data!.lat!),              longitude: double.parse(widget.data!.long!)              )                ..setIcon( img_provider.ImageProvider.fromImageProvider(              a.Image.asset('assets/images/location.png',height: 32,width: 24,).image))                ..setIconStyle(IconStyle(scale: 0.5))                ..setTextWithStyle(map.TextStyle(placement: TextStylePlacement.Bottom),text: widget.data!.name!)                ..addTapListener(onTap);            controller.map.moveWithAnimation(              CameraPosition(                Point(                  latitude: double.parse(widget.data!.lat!),                  longitude: double.parse(widget.data!.long!),                ),                zoom: 15, azimuth: 0, tilt: 45,              ),              animation.Animation(AnimationType.Linear,duration: 1)            );            mapkit.onStart();          },        ));  }}class MyMapObjectTapListener implements MapObjectTapListener {  final bool Function(MapObject,Point) onTap;  const MyMapObjectTapListener({required this.onTap});  @override  bool onMapObjectTap(MapObject mapObject, Point point) {    return onTap.call(mapObject, point);  }}